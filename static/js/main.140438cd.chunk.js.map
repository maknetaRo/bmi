{"version":3,"sources":["components/Navbar/Navbar.js","components/BmiForm/BmiForm.js","components/BmiDescription/BmiDescription.js","const.js","components/Result/Result.js","components/DescBox/DescBox.js","components/Main/Main.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","BmiForm","props","countBmi","event","preventDefault","bmi","Math","round","state","kilos","meters","setState","score","resetForm","handleChange","bind","field","this","target","value","id","htmlFor","type","step","required","onChange","onClick","readOnly","Component","BmiDescription","data","class","title","BMI_DESC","description","Result","DescBox","results","map","item","key","Main","Footer","href","Date","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.140438cd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar\">\n            <p>BMI Calculator</p>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport \"./BmiForm.css\";\n\nclass BmiForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kilos: \"\",\n      meters: \"\",\n      score: \"\",\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  handleChange(event, field) {\n    this.setState({ [field]: event.target.value });\n\n  }\n\n  countBmi = (event) => {\n    event.preventDefault();\n    let bmi = Math.round(\n      ((this.state.kilos / this.state.meters ** 2) * 10) / 10\n    );\n    this.setState({ score: bmi });\n\n  };\n  resetForm = () => {\n    this.setState({ kilos: \"\", meters: \"\", score: \"\" })\n  }\n\n\n\n  render() {\n\n    return (\n      <section className=\"app-form\" >\n        <div className=\"box\">\n          <form className=\"form\" id=\"form\" >\n            <label htmlFor=\"kilos\" className=\"label-box\">\n              Your weight in kg\n            </label>\n            <input\n              type=\"number\"\n              step=\"0.01\"\n              id=\"kilos\"\n              required\n              onChange={(event) => this.handleChange(event, \"kilos\")}\n\n\n            />\n\n            <label htmlFor=\"kilos\" className=\"label-box\">\n              Your height in meters\n            </label>\n            <input\n              type=\"number\"\n              step=\"0.01\"\n              id=\"meters\"\n              required\n              onChange={(event) => this.handleChange(event, \"meters\")}\n            />\n            <div className=\"btn-row\">\n              <input\n                type=\"submit\"\n                className=\"submit-btn\"\n                onClick={this.countBmi}\n                value=\"Count\"\n              />\n              <input type=\"reset\" className=\"reset-btn\" value=\"Reset\" onClick={this.resetForm} />\n            </div>\n\n\n            <input type=\"text\" value={this.state.score} readOnly />\n\n          </form>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default BmiForm;\n","import React from \"react\";\n\nfunction BmiDescription(props) {\n  return <p className={props.data.class}>{props.data.title}</p>;\n}\n\nexport default BmiDescription;\n","export const BMI_TITLE = \"BMI - Body Mass Index\";\n\nexport const BMI_TEXT =\n  \"BMI - Body Mass Index is a preson's weight in kilograms divided by the square of height in meters. A higher BMI can be used to screen for weight categories. A high BMI can be indicator of high body fatness.\";\n\nexport const BMI_DESC = [\n  {\n    id: 1,\n    title: \"Underweight = less than 18.5\",\n    description: \"\",\n  },\n  {\n    id: 2,\n    title: \"Normal weight = 18.5 - 24.9\",\n    description: \"\",\n  },\n  {\n    id: 3,\n    title: \"Overweight = 25 - 29.9\",\n    description: \"\",\n  },\n  {\n    id: 4,\n    title: \"Obesity = 30 - 34.9\",\n    description: \"\",\n  },\n  {\n    id: 5,\n    title: \"Severe obesity = 35 and more\",\n    description: \"\",\n  },\n];\n","import React from 'react';\n\nfunction Result(props) {\n\n    return (\n        <h3 className={props.class}>{props.score}</h3>\n    )\n};\n\nexport default Result","import React from \"react\";\nimport BmiDescription from \"../BmiDescription/BmiDescription\";\nimport { BMI_TEXT, BMI_TITLE, BMI_DESC } from \"../../const\";\nimport \"./DescBox.css\";\nimport Result from '../Result/Result';\n\nfunction DescBox(props) {\n  const results = BMI_DESC.map((item) => (\n    <BmiDescription class=\"range\" key={item.id} data={item} />\n  ));\n  const score = props.score;\n  return (\n    <section className=\"text-box\">\n      <article className=\"main-desc\">\n        <h2 className=\"title-desc\">{BMI_TITLE}</h2>\n        {BMI_TEXT}\n      </article>\n      <article className=\"result-desc\">\n        <h2 className=\"title-desc\">Result</h2>\n        <Result class=\"result\" score={score} />\n        {results}\n      </article>\n    </section>\n  );\n}\n\nexport default DescBox;\n","import React from 'react';\nimport './Main.css';\nimport BmiForm from '../BmiForm/BmiForm';\nimport DescBox from '../DescBox/DescBox';\n\nfunction Main() {\n    return (\n        <main className=\"main\">\n            <BmiForm />\n            <DescBox />\n        </main>\n    )\n}\n\nexport default Main","import React from \"react\";\nimport \"./Footer.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <p className=\"footer-para\">\n        Created with &hearts; by{\" \"}\n        <a className=\"author\" href=\"https://twitter.com/makneta\">\n          Magdalena Ros≈Çaniec\n        </a>\n      </p>\n      <p className=\"footer-para\">&copy; {new Date().getFullYear()}</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport Main from './components/Main/Main';\nimport Footer from './components/Footer/Footer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}